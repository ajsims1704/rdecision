% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ExpressionModelVariable.R
\docType{class}
\name{ExpressionModelVariable}
\alias{ExpressionModelVariable}
\title{ExpressionModelVariable}
\description{
An R6 class for a model variable constructed from an expression
involving other model variables.
}
\details{
A class to support expressions involving objects
of base class ModelVariable, which itself behaves like a 
model variable. For example if \code{A} and
\code{B} are variables with base class \code{ModelVariable}
and \code{c} is a variable of type \code{numeric}, then
it is not possible to write, for example, 
\code{x <- 42*A/B + c}, because R cannot manipulate class
variables using the same operators as regular variables. 
But such forms of expression may be desirable in constructing a
model and this class provides a mechanism for doing so.
}
\note{
Methods `getSD` and `getQuantile` return NA. For many expressions
involving model variables there will be no closed form expression
for these values, and they would normally be obtained by simulation.
Method `getDistribution` returns the string representation of the
expression used to create the model variable.
}
\author{
Andrew J. Sims \email{andrew.sims5@nhs.net}
}
\section{Super class}{
\code{\link[rdecision:ModelVariable]{rdecision::ModelVariable}} -> \code{ExpressionModelVariable}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ExpressionModelVariable$new()}}
\item \href{#method-sample}{\code{ExpressionModelVariable$sample()}}
\item \href{#method-value}{\code{ExpressionModelVariable$value()}}
\item \href{#method-getDistribution}{\code{ExpressionModelVariable$getDistribution()}}
\item \href{#method-getMean}{\code{ExpressionModelVariable$getMean()}}
\item \href{#method-getSD}{\code{ExpressionModelVariable$getSD()}}
\item \href{#method-getQuantile}{\code{ExpressionModelVariable$getQuantile()}}
\item \href{#method-getOperands}{\code{ExpressionModelVariable$getOperands()}}
\item \href{#method-clone}{\code{ExpressionModelVariable$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="rdecision" data-topic="ModelVariable" data-id="getDescription">}\href{../../rdecision/html/ModelVariable.html#method-getDescription}{\code{rdecision::ModelVariable$getDescription()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="rdecision" data-topic="ModelVariable" data-id="getLabel">}\href{../../rdecision/html/ModelVariable.html#method-getLabel}{\code{rdecision::ModelVariable$getLabel()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="rdecision" data-topic="ModelVariable" data-id="getUnits">}\href{../../rdecision/html/ModelVariable.html#method-getUnits}{\code{rdecision::ModelVariable$getUnits()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="rdecision" data-topic="ModelVariable" data-id="isExpression">}\href{../../rdecision/html/ModelVariable.html#method-isExpression}{\code{rdecision::ModelVariable$isExpression()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="rdecision" data-topic="ModelVariable" data-id="r">}\href{../../rdecision/html/ModelVariable.html#method-r}{\code{rdecision::ModelVariable$r()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="rdecision" data-topic="ModelVariable" data-id="tabulate">}\href{../../rdecision/html/ModelVariable.html#method-tabulate}{\code{rdecision::ModelVariable$tabulate()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a Model Variable formed from an expression involving other
model variables.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionModelVariable$new(
  label,
  description,
  units,
  expr,
  envir = globalenv()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{label}}{A character string label for the variable. It is advised
to make this the same as the variable name which helps when tabulating
model variables involving ExpressionModelVariables.}

\item{\code{description}}{Name for the model variable expresssion. In 
a complex model it may help to tabulate how model variables are
combined into costs, probablities and rates.}

\item{\code{units}}{Units in which the variable is expressed.}

\item{\code{expr}}{An R expression involving model variables which would be 
syntactically correct were each model variable to be replaced by
numerical variables.}

\item{\code{envir}}{The environment in which the model variables live. Normally,
and by default, this is the global environment. But if an object is
created which refers to model variables created in a different 
environment it must be specified. If creating an object from
within a function, for example, set `envir=environment()` in the
parameter list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An object of type ExpressionModelVariable
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sample"></a>}}
\if{latex}{\out{\hypertarget{method-sample}{}}}
\subsection{Method \code{sample()}}{
Set the value of the model variable from its uncertainty distribution.
Nothing is returned; the sampled value is returned at the next
call to `value()`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionModelVariable$sample(expected = F)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expected}}{Logical; if TRUE, sets the value of the model variable
returned at subsequent calls to `value()` to be equal to the 
expectation of the variable. Default is FALSE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Updated ExpressionModelVariable object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-value"></a>}}
\if{latex}{\out{\hypertarget{method-value}{}}}
\subsection{Method \code{value()}}{
Evaluate the expression.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionModelVariable$value()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Numerical value of the evaluated expression.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDistribution"></a>}}
\if{latex}{\out{\hypertarget{method-getDistribution}{}}}
\subsection{Method \code{getDistribution()}}{
Accessor function for the name of the expression model variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionModelVariable$getDistribution()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Expression as a character string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getMean"></a>}}
\if{latex}{\out{\hypertarget{method-getMean}{}}}
\subsection{Method \code{getMean()}}{
Return the expected value of the expression variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionModelVariable$getMean()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Expected value as a numeric value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSD"></a>}}
\if{latex}{\out{\hypertarget{method-getSD}{}}}
\subsection{Method \code{getSD()}}{
Return the standard deviation of the distribution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionModelVariable$getSD()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Standard deviation as a numeric value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getQuantile"></a>}}
\if{latex}{\out{\hypertarget{method-getQuantile}{}}}
\subsection{Method \code{getQuantile()}}{
Return the quantiles by sampling the variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionModelVariable$getQuantile(probs)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{probs}}{Vector of probabilities, in range [0,1].}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Vector of quantiles.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getOperands"></a>}}
\if{latex}{\out{\hypertarget{method-getOperands}{}}}
\subsection{Method \code{getOperands()}}{
Return a list of operands that are themselves ModelVariables given
in the expression.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionModelVariable$getOperands()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of model variables.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionModelVariable$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
