% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ModelVariable.R
\docType{class}
\name{ModelVariable}
\alias{ModelVariable}
\title{ModelVariable}
\description{
An R6 class for a variable in an health economic model
}
\details{
Base class for a variable used in a health economic model. The base 
class, which is not intended to be directly instantiated by model
applications, wraps a numerical value which is used in calculations.
The base class provides a framework for creating classes of model
variables whose uncertainties are described by statistical distributions
parametrized with hyperparameters.
}
\author{
Andrew Sims \email{andrew.sims@newcastle.ac.uk}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ModelVariable$new()}}
\item \href{#method-get_environment}{\code{ModelVariable$get_environment()}}
\item \href{#method-isExpression}{\code{ModelVariable$isExpression()}}
\item \href{#method-sample}{\code{ModelVariable$sample()}}
\item \href{#method-value}{\code{ModelVariable$value()}}
\item \href{#method-get_label}{\code{ModelVariable$get_label()}}
\item \href{#method-set_label}{\code{ModelVariable$set_label()}}
\item \href{#method-unset_label}{\code{ModelVariable$unset_label()}}
\item \href{#method-getDescription}{\code{ModelVariable$getDescription()}}
\item \href{#method-getUnits}{\code{ModelVariable$getUnits()}}
\item \href{#method-getDistribution}{\code{ModelVariable$getDistribution()}}
\item \href{#method-getOperands}{\code{ModelVariable$getOperands()}}
\item \href{#method-tabulate}{\code{ModelVariable$tabulate()}}
\item \href{#method-getMean}{\code{ModelVariable$getMean()}}
\item \href{#method-getSD}{\code{ModelVariable$getSD()}}
\item \href{#method-getQuantile}{\code{ModelVariable$getQuantile()}}
\item \href{#method-r}{\code{ModelVariable$r()}}
\item \href{#method-clone}{\code{ModelVariable$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create an object of type `ModelVariable`
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$new(description, units)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{description}}{A character string description of the variable
and its role in the
model. This description will be used in a tabulation of the
variables linked to a model.}

\item{\code{units}}{A character string description of the units, e.g. 'GBP',
'per year'.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new ModelVariable object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_environment"></a>}}
\if{latex}{\out{\hypertarget{method-get_environment}{}}}
\subsection{Method \code{get_environment()}}{
Find the environment nearest the global environment in which
this model variable or a reference to it, lives.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$get_environment()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An environment. If not found, returns the empty environment.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-isExpression"></a>}}
\if{latex}{\out{\hypertarget{method-isExpression}{}}}
\subsection{Method \code{isExpression()}}{
Is this ModelVariable an expression?
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$isExpression()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE if it inherits from ExpressionModelVariable, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sample"></a>}}
\if{latex}{\out{\hypertarget{method-sample}{}}}
\subsection{Method \code{sample()}}{
Set the value of the model variable from its uncertainty distribution.
Nothing is returned; the sampled value is returned at the next
call to `value()`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$sample(expected = F)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expected}}{Logical; if TRUE sets the value of the model variable
returned at subsequent calls to `value()` to be equal to the 
expectation of the variable. Default is FALSE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Updated ModelVariable object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-value"></a>}}
\if{latex}{\out{\hypertarget{method-value}{}}}
\subsection{Method \code{value()}}{
Return the current value of the model variable. This will be the 
expected value if the argument to the most recent call to `sample`
was TRUE or after creation of the object; otherwise it will return
a value sampled from the uncertainty distribution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$value()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Numeric value of the model variable.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_label"></a>}}
\if{latex}{\out{\hypertarget{method-get_label}{}}}
\subsection{Method \code{get_label()}}{
Accessor function for the label. Unless `set_label` has been called, this
function will return the variable's own name. As far as possible, this will 
be the variable name used when the object was first created in the model,
so that it aligns with the variable name used in ExpressionModelVariables
and tabulations of variables used in models. But due to the nature of R's
non-standard evaluation, this is not ensured. It will sometimes return
the name of a reference to the original variable, if
the original environment is not an ancestor of the calling environment of
this function. In cases where references to model variables are routinely
created, destroyed and passed around, it is advised to call this method
from the environment of the original object as soon as possible after
it is created. Subsequent calls will return the original name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$get_label()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Label of model variable as character string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_label"></a>}}
\if{latex}{\out{\hypertarget{method-set_label}{}}}
\subsection{Method \code{set_label()}}{
Function to set the label. Normally this is not required because the label
is set to the name given to the variable by the user. This function allows
the default behaviour to be overridden.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$set_label(label)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{label}}{The label to use.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Updated ModelVariable object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-unset_label"></a>}}
\if{latex}{\out{\hypertarget{method-unset_label}{}}}
\subsection{Method \code{unset_label()}}{
Function to unset the label. Causes the label to revert to its default, i.e.
its variable name at the next call to `get_label`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$unset_label()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Updated ModelVariable object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDescription"></a>}}
\if{latex}{\out{\hypertarget{method-getDescription}{}}}
\subsection{Method \code{getDescription()}}{
Accessor function for the description.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$getDescription()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Description of model variable as character string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getUnits"></a>}}
\if{latex}{\out{\hypertarget{method-getUnits}{}}}
\subsection{Method \code{getUnits()}}{
Accessor function for units.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$getUnits()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Description of units as character string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDistribution"></a>}}
\if{latex}{\out{\hypertarget{method-getDistribution}{}}}
\subsection{Method \code{getDistribution()}}{
Accessor function for the name of the uncertainty distribution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$getDistribution()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Distribution name as character string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getOperands"></a>}}
\if{latex}{\out{\hypertarget{method-getOperands}{}}}
\subsection{Method \code{getOperands()}}{
Return a list of operands given in the expression used to form the
expression. Only relevant for objects of inherited type 
ExpressionModelVariable, but defined for the base class for convenience to
avoid type checking inside iterators.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$getOperands()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of operands that are themselves ModelVariables. An empty list 
for non-expression model variables.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tabulate"></a>}}
\if{latex}{\out{\hypertarget{method-tabulate}{}}}
\subsection{Method \code{tabulate()}}{
Tabulate the model variable and optionally include its operands.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$tabulate(include.operands = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include.operands}}{If TRUE include the operands of this model
variable in the table. Otherwise return a table with one row, 
describing this variable.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Data frame with one row per model variable, as follows:
\describe{
\item{Label}{The label given to the variable on creation.}
\item{Description}{As given at initialization.}
\item{Units}{Units of the variable.}
\item{Distribution}{Either the uncertainty distribution, if
it is a regular model variable, or the expression used to create it,
if it is an ExpressionModelVariable.}
\item{Mean}{Expected value.}
\item{SD}{Standard deviation.}
\item{Q2.5}{p=0.025 quantile.}
\item{Q97.5}{p=0.975 quantile.}
\item{Qhat}{Asterisk (*) if the quantiles and SD have been estimated
by random sampling.}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getMean"></a>}}
\if{latex}{\out{\hypertarget{method-getMean}{}}}
\subsection{Method \code{getMean()}}{
Return the expected value of the distribution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$getMean()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Expected value as a numeric value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSD"></a>}}
\if{latex}{\out{\hypertarget{method-getSD}{}}}
\subsection{Method \code{getSD()}}{
Return the standard deviation of the distribution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$getSD()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Standard deviation as a numeric value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getQuantile"></a>}}
\if{latex}{\out{\hypertarget{method-getQuantile}{}}}
\subsection{Method \code{getQuantile()}}{
Find quantiles of the uncertainty distribution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$getQuantile(probs)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{probs}}{Numeric vector of probabilities, each in range [0,1].}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Vector of numeric values of the same length as `probs`.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-r"></a>}}
\if{latex}{\out{\hypertarget{method-r}{}}}
\subsection{Method \code{r()}}{
Draw random samples from the model variable. After returning the
sample, the next call to `value()` will return the expected value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$r(n)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{Number of samples to return}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric vector of samples drawn at random.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModelVariable$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
